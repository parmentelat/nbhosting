#!/bin/bash

COMMAND="$(basename $0)"
USAGE="$COMMAND [-q] [-r] coursename username user_workspace course_hash user_hash"
QUIET=""
RESET_IF_NEEDED=""
ALWAYS_RESET=""

function echoq() {
    [ -n "$QUIET" ] && return
    echo -n "$@"
}

function exitq() {
    [ -z "$QUIET" ] && echo
    exit "$@"
}


function main() {

    while getopts "qrR" option; do
        case $option in
            q) QUIET="true" ;;
            r) RESET_IF_NEEDED="true" ;;
            R) ALWAYS_RESET="true" ;;
        esac
    done
    shift $((OPTIND-1))
    # reset OPTIND for subsequent calls to getopts
    OPTIND=1

    [[ "$#" == 5 ]] || { echo "$USAGE"; exit 1; }
    local coursename=$1; shift
    local username=$1; shift
    local user_workspace=$1; shift
    # xxx turns out this is ignored
    local course_hash=$1; shift
    local user_hash=$1; shift

    local SUDO="sudo -u $username"
    local LOG="__LOG"

    local merge_message="nbh is merging upstream"


    cd $user_workspace
    # check this is indeed a git repo
    git log HEAD -1 >& /dev/null || {
        echoq "$user_workspace not a git repo - aborting"
        exitq 1
    }
    local branch=$(git rev-parse --abbrev-ref HEAD)


    function log-header() {
        local date=$(date +'%Y-%m-%d:%H:%M')
        echo "==== $date $@" &>> $LOG
    }
    function init-git-in-student-space() {
        $SUDO git config user.name &>> /dev/null || $SUDO git config --global user.name "$username"
        $SUDO git config user.email &>> /dev/null || $SUDO git config --global user.email "$username@nbhosting.io"
        $SUDO git config pull.rebase &>> /dev/null || $SUDO git config --global pull.rebase false
    }

    echoq "=== $username/$coursename"

    init-git-in-student-space

    log-header git fetch --all
    $SUDO git fetch --all &>> $LOG

    [[ -n "$ALWAYS_RESET" ]] && {
        $SUDO git reset --hard origin/$branch &>> $LOG
        echoq " (0: always reset)"
        exitq 0
    }

    echoq " (1: ff)"
    log-header git pull fast-forward
    $SUDO git pull --ff-only &>> $LOG && {
        echoq " pull fast-forward OK"
        exitq 0
    }

    # surprisingly enough, git pull has no -m option
    # if the student has diverged, then it's perfectly possible
    # that git pull will work just fine although it's not a fast-forward
    echoq " (2: pull)"
    log-header git pull with automerge
       $SUDO git pull --no-edit &>> $LOG \
    && $SUDO git commit --amend -m"$merge_message" &>> $LOG && {
        echoq " pull automerge OK"
        exitq 0
    }

    [[ -n "$RESET_IF_NEEDED" ]] && {
        $SUDO git reset --hard origin/$branch &>> $LOG
        echoq "(3: reset because needed)"
        exitq 0
    }

    # when we reach this point it means that git pull did not work it out
    # by itself so we have some student changes on the way
    # so we compute the set of files that can be a problem
    ancestor=$(git merge-base origin/$branch $user_hash)
    function assess_damages() {
        # local changes
        git diff --name-only | sort > __LOCAL_CHANGES
        # for information only : teacher changes
        git diff --name-only $branch origin/$branch | sort > __UPSTREAM_CHANGES
        # remove leftovers from older strategies
        rm -f __COMMON*
        # split between notebooks and others
        grep '.ipynb$' __LOCAL_CHANGES > __LOCAL_CHANGES_IPYNB
    }

    assess_damages
    local notebook
    for notebook in $(cat __LOCAL_CHANGES_IPYNB); do
        echoq " (3 nbso $notebook)"
        $SUDO python3 -m nbstripout $notebook
    done
    # if we run this script a first time, but it fails
    # then we have created a commit and the repo is clean
    # so no local changes, but it's still worth trying to merge...
    local local_changes="$(cat __LOCAL_CHANGES)"
    if [ -z "$local_changes" ]; then
        echoq " (3!) warning - no local changes found !"
        log-header "(3!) warning - no local changes found !"
    else
        local nb_local_changes=$(wc -w <<< $local_changes)
        log-header git add $nb_local_changes local files
        $SUDO git add $local_changes &>> $LOG
        local commit_message="WIP - nbh is committing $nb_local_changes local files"
        log-header git commit -m$commit_message
        $SUDO git commit -m"$commit_message" &>> $LOG
        echoq " created local commit $commit_message"
    fi
    log-header git merge --commit -m$merge_message
    $SUDO git merge origin/$branch --commit -m"$merge_message" &>> $LOG
    local OK=$?
    echoq " (3 upstream merge -> $OK)"
    log-header "(3) upstream merge returned $OK"
    # abort merge if failed
    if [ $OK != 0 ]; then
        echoq " (4) git merge --abort"
        log-header "(4) git merge --abort"
        echoq " (4) to redo manually, do git merge origin/$branch"
        $SUDO git merge --abort
    fi
    exitq $OK
}

main "$@"
